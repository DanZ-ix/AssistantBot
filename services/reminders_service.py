import json
import re
from datetime import datetime

from bson import ObjectId

from loader import reminder_col

async def save_reminder_to_db(reminder_data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ MongoDB.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :param text: –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    :param reminder_datetime: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    await reminder_col.insert_one(reminder_data)


async def get_reminders_by_user_id(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ user_id.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :return: –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä–µ–π.
    """
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id
    reminders = await reminder_col.find({"user_id": str(user_id)}).to_list()

    return reminders


def format_reminders(input_string):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º ObjectId(...) –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫
        input_string = re.sub(r"ObjectId\('([^']+)'\)", r'"\1"', input_string)

        # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
        input_string = input_string.replace("'", '"')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ –æ–±—ä–µ–∫—Ç Python
        reminders = json.loads(input_string)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
        result = []
        for reminder in reminders:
            text = reminder.get("reminder_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            raw_datetime = reminder.get("reminder_datetime", None)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            if raw_datetime:
                try:
                    dt = datetime.fromisoformat(raw_datetime)
                    formatted_datetime = dt.strftime("%d %B %Y, %H:%M")  # –ü—Ä–∏–º–µ—Ä: "25 March 2025, 18:25"
                    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                    month_translation = {
                        "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞",
                        "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
                        "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
                        "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
                    }
                    for eng, rus in month_translation.items():
                        formatted_datetime = formatted_datetime.replace(eng, rus)
                except ValueError:
                    formatted_datetime = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
            else:
                formatted_datetime = "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            result.append(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text} (–≤—Ä–µ–º—è: {formatted_datetime})")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        return "\n".join(result)

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

async def get_reminders_by_object_ids(obj_id_list_str):
    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ObjectId –∏–∑ —Å—Ç—Ä–æ–∫–∏
    object_ids = re.findall(r"ObjectId\('([^']+)'\)", obj_id_list_str)
    if not object_ids:
        return "–û—à–∏–±–∫–∞: –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ObjectId"

    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ ObjectId
    object_ids = [ObjectId(oid) for oid in object_ids]

    # 3. –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ ObjectId
    query = {"_id": {"$in": object_ids}}
    results = await reminder_col.find(query).to_list(None)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã

    # 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    return results


async def process_reminder_operation(operation_str):
    try:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
        FIELD_NAMES = {
            'reminder_text': '–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
            'reminder_datetime': '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'
        }

        # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç ObjectId()
        operation_str = re.sub(
            r'ObjectId\s*\(\s*["\']([^"\']+)["\']\s*\)',
            r'"\1"',
            operation_str,
            flags=re.IGNORECASE
        ).strip()

        # 2. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –º–∞—Å—Å–∏–≤–∞—Ö
        operation_str = re.sub(r',(\s*[\]\}])', r'\1', operation_str)

        # 3. –ü–∞—Ä—Å–∏–Ω–≥ JSON
        operation = json.loads(operation_str, strict=False)

        # 4. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ObjectId
        def convert_objectids(obj):
            if isinstance(obj, list):
                return [convert_objectids(item) for item in obj]
            if isinstance(obj, dict):
                return {k: convert_objectids(v) for k, v in obj.items()}
            if isinstance(obj, str) and re.match(r'^[a-f0-9]{24}$', obj, re.IGNORECASE):
                return ObjectId(obj)
            return obj

        operation = convert_objectids(operation)

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if 'operation' not in operation:
            return "üî• –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'operation'"
        if 'filter' not in operation:
            return "üî• –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'filter'"

        op_type = operation['operation']
        filter_query = operation['filter']

        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        def format_date(date_value):
            if not date_value:
                return '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            if isinstance(date_value, datetime):
                return date_value.strftime("%d.%m.%Y %H:%M")
            try:
                dt = datetime.fromisoformat(date_value)
                return dt.strftime("%d.%m.%Y %H:%M")
            except (ValueError, TypeError):
                return str(date_value)

        if op_type == 'update':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è update-–¥–∞–Ω–Ω—ã—Ö
            if 'update' not in operation:
                return "üî• –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'update'"
            if '$set' not in operation['update']:
                return "üî• –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ update —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä $set"
            if not operation['update']['$set']:
                return "üî• –ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ $set"

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            old_docs = await reminder_col.find(filter_query).to_list(None)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            update_data = operation['update']
            result = await reminder_col.update_many(
                filter_query,
                update_data
            )

            if result.modified_count > 0:
                changes = []
                for doc in old_docs:
                    change_log = []
                    for field, new_value in update_data['$set'].items():
                        field_name = FIELD_NAMES.get(field, field)
                        old_value = doc.get(field)
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                        if field == 'reminder_datetime':
                            old_value = format_date(old_value)
                            new_value = format_date(new_value)
                        change_log.append(
                            f"  {field_name}: \"{old_value}\" ‚Üí \"{new_value}\""
                        )
                    changes.append("–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(change_log))
                return f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {result.modified_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n" + "\n\n".join(changes)
            return "–ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å"

        elif op_type == 'delete':
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            docs = await reminder_col.find(filter_query).to_list(None)

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            result = await reminder_col.delete_many(filter_query)

            if result.deleted_count > 0:
                deleted = []
                for doc in docs:
                    text = doc.get('reminder_text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
                    date = format_date(doc.get('reminder_datetime'))
                    deleted.append(
                        f"  –¢–µ–∫—Å—Ç: \"{text}\"\n  –î–∞—Ç–∞: {date}"
                    )
                return f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n" + "\n\n".join(deleted)
            return "–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å"

        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {op_type}"

    except json.JSONDecodeError as e:
        return (f"üî• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {e.pos}: {e.msg}\n"
                f"–§—Ä–∞–≥–º–µ–Ω—Ç –æ—à–∏–±–∫–∏: {operation_str[e.pos - 20:e.pos + 20]}...")
    except Exception as e:
        return f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"